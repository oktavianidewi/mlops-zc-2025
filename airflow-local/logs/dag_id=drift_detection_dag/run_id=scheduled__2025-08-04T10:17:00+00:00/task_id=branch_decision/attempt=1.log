{"timestamp":"2025-08-04T10:34:01.547615","level":"info","event":"DAG bundles loaded: dags-folder","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-08-04T10:34:01.548382","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/dag_ml_monitoring.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-08-04T10:34:02.968208Z","level":"info","event":"Branching to retraining pipeline, based on drift detection.","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-04T10:34:02.968769","level":"info","event":"Done. Returned value was: retrain_model","logger":"airflow.task.operators.airflow.providers.standard.operators.python.BranchPythonOperator"}
{"timestamp":"2025-08-04T10:34:02.968984","level":"info","event":"Branch into retrain_model","logger":"airflow.task.operators.airflow.providers.standard.operators.python.BranchPythonOperator"}
{"timestamp":"2025-08-04T10:34:02.969230","level":"info","event":"Following branch {'retrain_model'}","logger":"airflow.task.operators.airflow.providers.standard.operators.python.BranchPythonOperator"}
{"timestamp":"2025-08-04T10:34:02.969480","level":"info","event":"Skipping tasks [('skip_retrain', -1)]","logger":"airflow.task.operators.airflow.providers.standard.operators.python.BranchPythonOperator"}
{"timestamp":"2025-08-04T10:34:02.984410","level":"info","event":"Skipping downstream tasks.","logger":"task"}
